// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("PUBLIC_NODE_DATABASE_URL")
}

enum TaskStatus {
  waiting
  inprogress
  test
  done
}

enum PriorityLevel {
  low
  medium
  high
  critical
}

model User {
  id              String           @id @default(uuid())
  name            String
  email           String           @unique
  passwordHash    String
  createdAt       DateTime         @default(now())
  createdTasks    Task[]           @relation("CreatedTasks")
  comments        Comment[]
  attachments     Attachment[]
  assignedTasks   TaskAssignment[]
  createdProjects Project[]        @relation("CreatedProjects")
}

model Project {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdById String?
  createdBy   User?    @relation("CreatedProjects", fields: [createdById], references: [id])
  createdAt   DateTime @default(now())
  tasks       Task[]
}

model Task {
  id          Int              @id @default(autoincrement())
  title       String
  description String?
  status      TaskStatus       @default(inprogress)
  priority    PriorityLevel    @default(low)
  dueDate     DateTime?
  projectId   Int?
  project     Project?         @relation(fields: [projectId], references: [id])
  createdById String
  createdBy   User             @relation("CreatedTasks", fields: [createdById], references: [id])
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  assignments TaskAssignment[]
  comments    Comment[]
  attachments Attachment[]
}

model TaskAssignment {
  task   Task   @relation(fields: [taskId], references: [id])
  taskId Int
  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@id([taskId, userId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  taskId    Int
  userId    String
  task      Task     @relation(fields: [taskId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Attachment {
  id           Int      @id @default(autoincrement())
  fileUrl      String
  uploadedAt   DateTime @default(now())
  uploadedBy   User     @relation(fields: [uploadedById], references: [id])
  uploadedById String
  task         Task     @relation(fields: [taskId], references: [id])
  taskId       Int
}
